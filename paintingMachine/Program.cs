using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;

namespace paintingMachine
{
    class Program
    {
        private static StringBuilder c64 = new StringBuilder();

        static void Main(string[] args)
        {
            initUI();
        }
        static void initUI()
        {
            Console.BackgroundColor = ConsoleColor.Blue;
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.SetWindowSize(88, 30);
            Console.OutputEncoding = Encoding.Unicode;
            Console.Title = "Wicked's loot machine";
            Console.Clear();

            setupScreens();
            Console.WriteLine(c64.ToString());
            bool run = true;

            while (run)
            {
                Console.WriteLine("enter your command:");
                Console.WriteLine("1: Paintings, 2: Drywall, 3: token, \n4=City Decor, 4b=indoor loot, 6=conversations, q=quit");
                string selection = Console.ReadLine();
                switch (selection)
                {
                    case ("1"):
                    case ("paintings"):
                        run1();
                        break;

                    case ("2"):
                    case ("drywall"):
                        run2();
                        break;

                    case ("3"):
                    case ("run3"):
                        run3();
                        break;
                    case ("4"):
                    case ("outoorloot"):
                        /* loot has to:
                         * 1- replace the APT in the object/.../...iff file
                         * 2- lua file
                         * 3- object file
                         * 4- serverobjects
                         * 5- froggy
                         * 6- loot object
                         * 7- decide if it is outdoors????
                         */
                        run4();
                        break;
                    case ("4c"):
                        /* loot has to:
                         * 1- replace the APT in the object/.../...iff file
                         * 2- lua file
                         * 3- object file
                         * 4- serverobjects
                         * 5- froggy
                         * 6- loot object
                         * 7- decide if it is outdoors????
                         */
                        run4b();
                        break;
                    case ("4b"):
                    case ("indoorloot"):
                        /* loot has to:
                         * 1- replace the APT in the object/.../...iff file
                         * 2- lua file
                         * 3- object file
                         * 4- serverobjects
                         * 5- froggy
                         * 6- loot object
                         * 7- decide if it is outdoors????
                         */
                        run4(false);
                        break;
                    case ("5"):
                        run5();
                        break;
                    case ("6"):
                    case ("convo"):
                        run6();
                        break;
                    case ("7"):
                        run7();
                        break;
                    case ("8"):
                        // string table crap
                        run8();
                        break;
                    case ("quit"):
                    case ("q"):
                        run = false;
                        break;

                    default:
                        break;
                }
            }
        }
        static void run8()
        {

        }
        static void run6()
        {
            // this reads the file convo.txt
            // line 1 is the name of the conversation
            // line 2 is the name of the handler and that creates the following init
            /*
infiniteLLCNedoConvoTemplate = ConvoTemplate:new {
	initialScreen = "init",
	templateType = "Lua",
	luaClassHandler = "infiniteLLCNedoConvoHandler",
	screens = {}
}

            then create this line at the very end
addConversationTemplate("infiniteLLCNedoConvoTemplate", infiniteLLCNedoConvoTemplate);
            */
            string[] convo = File.ReadAllLines("convo.txt");
            StringBuilder header = new StringBuilder();
            header.AppendLine("-- Convo Template generated by Wicked's Conversation Generator");
            header.AppendLine("");
            StringBuilder body = new StringBuilder();
            string cName = convo[0];
            header.AppendLine(cName + " = ConvoTemplate:new {");
            header.AppendLine("     initialScreen = \"init\",");
            header.AppendLine("     templateType = \"Lua\",");
            header.AppendLine("     luaClassHandler = \"" + convo[1] + "\",");
            header.AppendLine("     screens = {}");
            header.AppendLine("}");

            /*
             how_q3 = ConvoScreen:new {
                id = "how_q3",
                leftDialog = "", 
                customDialogText = "text",
                stopConversation = "false",
                options = {
                    {"option 1", "go_q3"},
                    {"option 2", "end_1"},
                }
            }
            infiniteLLCNedoConvoTemplate:addScreen(how_q3);

            this is a conversation where stopConversation is implied to be false
            how_q3 text
            how_q3 option 1 go_q3
            how_q3 option 2 end_1

             */
            // lines 0 and 1 do other stuff
            string lastID = "";
            for (int i = 2; i < convo.Length; i++)
            {
                string[] line = convo[i].Split(new char[] { '\t' }, StringSplitOptions.RemoveEmptyEntries);
                if (line.Length > 0)
                {
                    if (lastID != line[0] && i > 2)
                    {
                        body.AppendLine("   }");
                        body.AppendLine("}");
                        body.AppendLine(cName + ":addScreen(" + lastID + ");");
                        body.AppendLine("");
                        lastID = line[0];
                    }
                    else if (i == 2)
                    {
                        lastID = line[0];
                    }
                    if (line.Length == 2)
                    {
                        // start the top part
                        body.AppendLine(lastID + " = ConvoScreen:new {");
                        body.AppendLine("   id = \"" + lastID + "\",");
                        body.AppendLine("   leftDialog = \"\", ");
                        body.AppendLine("   customDialogText = \"" + line[1] + "\",");
                        if (lastID.StartsWith("go") || lastID.StartsWith("end_1"))
                        {
                            body.AppendLine("   stopConversation = \"true\",");
                        }
                        else
                        {
                            body.AppendLine("   stopConversation = \"false\",");
                        }
                        body.AppendLine("   options = {");

                    }
                    else if (line.Length == 3)
                    {
                        body.AppendLine("      {\"" + line[1] + "\", \"" + line[2] + "\"},");
                    }
                }
            }
            body.AppendLine("   }");
            body.AppendLine("}");
            body.AppendLine(cName + ":addScreen(" + lastID + ");");
            body.AppendLine("");
            StringBuilder footer = new StringBuilder();
            footer.AppendLine("addConversationTemplate(\"" + cName + "\", " + cName + ");");

            File.WriteAllText(gConfig.convoDirectory + cName + ".txt", header.ToString() + body.ToString() + footer.ToString());

            // copy the convo.txt file too
            File.Copy("convo.txt", gConfig.convoDirectory + cName + "_tabbed.txt", true);
        }
        static void run7()
        {
            // creates pet control devices
            string[] petList =
            {
                "purbole_hunter",
                "mottled_wrix",
                "crimson_razor_cat",
                "female_swamp_tusk_cat",
                "borgle_protector",
                "frenzied_graul",
                "devil_gulginaw",
                "mutant_baz_nitch",
                "shear_mite_hunter",
                "gaping_spider_hunter",
                "mantigrue_hunter",
                "kai_tok_slayer",
                "riverside_sulfur_mynock",
                "kinad_baz_nitch",
                "skreeg_hunter",
                "perlek_ravager",
                "merek_deaths_head",
                "bull_rancor",
                "great_plains_stalker",
                "malignant_squill",
                "spiked_slasher",
            };
            // create the pet lua file

            // create the addition to the objects file
            // create the server objects addition


            // start 
            string[] dlist = Directory.GetDirectories(gConfig.outputDirectory);
            string defName = "pet" + dlist.Length.ToString();
            Console.WriteLine("Existing Outputs:");
            for (int i = 0; i < dlist.Length; i++)
            {
                DirectoryInfo di = new DirectoryInfo(dlist[i]);
                Console.WriteLine(di.Name);
            }
            string defString = "no";
            Console.WriteLine("Delete existing dirs? (y) [def=" + defString + "]");
            if (Console.ReadLine() == "y")
            {
                for (int i = 0; i < dlist.Length; i++)
                {
                    Directory.Delete(dlist[i], true);
                }
                Console.WriteLine("----------------------------");
            }

            Console.WriteLine("Tre Name? [def=" + defName + "]");
            string instring = Console.ReadLine();

            string treName = instring.Length > 0 ? instring : defName;

            Directory.CreateDirectory(gConfig.outputDirectory + treName + "\\" + gConfig.lua);
            StringBuilder objectsFile = new StringBuilder();
            StringBuilder serverObjectsFile = new StringBuilder();

            for (int i = 0; i < petList.Length; i++)
            {
                Console.WriteLine(petList[i]);
                // make the lua file

                File.WriteAllText(gConfig.outputDirectory + treName + "\\" + gConfig.lua + petList[i] + "_hue.lua", gConfig.petLuaFile.Replace("xxxxxx", petList[i]));
                // objects file
                objectsFile.AppendLine("-- " + petList[i]);
                objectsFile.AppendLine(gConfig.petObjectsFile.Replace("xxxxxx", petList[i]));
                objectsFile.AppendLine();


                serverObjectsFile.AppendLine("includeFile(\"intangible/pet/" + petList[i] + "_hue.lua\")");
            }
            File.WriteAllText(gConfig.outputDirectory + treName + "\\objects.txt", objectsFile.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\serverobjects.txt", serverObjectsFile.ToString());

        }
        static void run5()
        {
            Console.WriteLine("do nothing");
        }
        static void run2xxx()
        {
            List<object[]> frameSelection = new List<object[]>();
            for (int i = 0; i < gConfig.templates.GetLength(0); i++)
            {

                int template = i;
                string[] flist = Directory.GetFiles(gConfig.stagingDirectory + gConfig.templates[template, 1]);
                string lastone = "";
                for (int j = 0; j < flist.Length; j++)
                {
                    if (j == 0)
                        Console.WriteLine(gConfig.templates[i, 0]);
                    FileInfo fi = new FileInfo(flist[j]);
                    string[] tmp = fi.Name.Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries);
                    string tmpName = tmp[1].Split(new char[] { '.' }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (tmpName != lastone)
                    {
                        Console.WriteLine("\t" + tmpName);
                        // now ask which frames
                        List<int> selections = new List<int>();
                        for (int k = 0; k < gConfig.frames.GetLength(0); k++)
                        {
                            Console.WriteLine(gConfig.frames[k, 2] + "? [default = n]");
                            if (Console.ReadLine() == "y")
                                selections.Add(1);
                            else
                                selections.Add(0);
                        }
                        frameSelection.Add(new object[] { tmpName, selections });
                    }
                    lastone = tmpName;
                }
            }

            for (int i = 0; i < frameSelection.Count; i++)
            {
                List<int> sel = (List<int>)frameSelection[i].GetValue(1);
                string name = frameSelection[i].GetValue(0).ToString();
                Console.WriteLine(name);
                for (int j = 0; j < sel.Count; j++)
                {
                    Console.WriteLine("\t" + sel[j]);
                }
            }

        }
        static void run2()
        {
            // drywall
            string[] dlist = Directory.GetDirectories(gConfig.outputDirectory);
            string defName = "drywall" + dlist.Length.ToString();
            Console.WriteLine("Existing Outputs:");
            for (int i = 0; i < dlist.Length; i++)
            {
                DirectoryInfo di = new DirectoryInfo(dlist[i]);
                Console.WriteLine(di.Name);
            }
            string defString = "no";
            Console.WriteLine("Delete existing dirs? (y) [def=" + defString + "]");
            if (Console.ReadLine() == "y")
            {
                for (int i = 0; i < dlist.Length; i++)
                {
                    Directory.Delete(dlist[i], true);
                }
                Console.WriteLine("----------------------------");
            }

            Console.WriteLine("Tre Name? [def=" + defName + "]");
            string instring = Console.ReadLine();

            string treName = instring.Length > 0 ? instring : defName;

            makeTreFolders(treName, true);


            StringBuilder stringlist = new StringBuilder();
            StringBuilder luaServerObjects = new StringBuilder();
            StringBuilder luaObjects = new StringBuilder();
            StringBuilder frogObjects = new StringBuilder();
            StringBuilder lootObjects = new StringBuilder();


            for (int i = 0; i < gConfig.templates.GetLength(0); i++)
            {
                Console.WriteLine(gConfig.templates[i, 0]);
                int template = 5;
                string[] flist = Directory.GetFiles(gConfig.stagingDirectory + gConfig.templates[template, 1]);

                for (int j = 0; j < flist.Length; j++)
                {
                    FileInfo fi = new FileInfo(flist[j]);

                    string[] tmp = fi.Name.Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries);
                    string tmpName = tmp[1].Split(new char[] { '.' }, StringSplitOptions.RemoveEmptyEntries)[0];



                    string rawName = fi.Name.Replace(".dds", "");
                    //art_alderaan1_2000000000
                    if (rawName.Length > 24)
                    {
                        Console.WriteLine("ERROR: File Name Too Long: " + rawName);
                    }
                    else
                    {
                        // we have to make the strings identical in length to the template
                        // this is basically a lazy approach but it works so no need to mess with it
                        // if you don't do this, you will end up with files that might not open in SIE
                        // and will not work with the client, but buggy, not consistent failures
                        string tname = NewName(rawName);
                        stringlist.AppendLine(tname);
                        Console.WriteLine("\t" + tname);

                        // copy texture files
                        File.Copy(flist[j], gConfig.outputDirectory + treName + "\\" + gConfig.texture + tname + fi.Extension);


                        string nname = NewName(rawName);

                        // shader file
                        makeFile(tname, gConfig.outputDirectory + treName + "\\" + gConfig.shader + nname + ".sht", "sht");

                        // object file                        
                        makeFile(nname, gConfig.outputDirectory + treName + "\\" + gConfig.custom + "shared_" + nname + ".iff", "iff", tname);

                        // appearance file
                        makeFile(nname, gConfig.outputDirectory + treName + "\\" + gConfig.appear + nname + ".apt", "apt");

                        // mesh file
                        makeMesh(nname, gConfig.outputDirectory + treName + "\\" + gConfig.mesh + nname + ".msh", gConfig.templates[template, 1]);

                        // lua server objects
                        luaServerObjects.AppendLine("includeFile(\"../custom_scripts/object/tangible/custom/" + nname + ".lua\")");
                        lootObjects.AppendLine("includeFile(\"../custom_scripts/loot/items/custom/" + nname + ".lua\")");

                        // frog text
                        frogObjects.AppendLine("\"" + rawName + "\",\"object/tangible/custom/" + nname + ".iff\",");

                        // lua objects file
                        luaObjects.AppendLine("-- " + nname);
                        luaObjects.AppendLine("object_tangible_custom_shared_" + nname + " = SharedTangibleObjectTemplate:new {clientTemplateFileName = \"object/tangible/custom/shared_" + nname + ".iff\"}");
                        luaObjects.AppendLine("ObjectTemplates:addClientTemplate(object_tangible_custom_shared_" + nname + ", \"object/tangible/custom/shared_" + nname + ".iff\")");
                        luaObjects.AppendLine("");

                        StringBuilder luaPainting = new StringBuilder();
                        luaPainting.AppendLine("-- generated by Wicked's loot machine");
                        luaPainting.AppendLine("-- string name is in art_n: " + tname);
                        luaPainting.AppendLine("-- string description is in art_d: " + tname);
                        luaPainting.AppendLine("-- layout: " + gConfig.templates[i, 0]);
                        luaPainting.AppendLine("object_tangible_custom_" + nname + " = object_tangible_custom_shared_" + nname + ":new {}");
                        luaPainting.AppendLine("ObjectTemplates:addTemplate(object_tangible_custom_" + nname + ", \"object/tangible/custom/" + nname + ".iff\")");

                        // loot objects
                        StringBuilder lootObject = new StringBuilder();
                        lootObject.AppendLine("-- generated by Wicked's loot machine");
                        lootObject.AppendLine(nname + " = {");
                        lootObject.AppendLine("minimumLevel = 0,");
                        lootObject.AppendLine("maximumLevel = 0,");
                        lootObject.AppendLine("customObjectName = \"\",");
                        lootObject.AppendLine("directObjectTemplate = \"object/tangible/custom/" + nname + ".iff\",");
                        lootObject.AppendLine("craftingValues = { },");
                        lootObject.AppendLine("customizationStringNames = { },");
                        lootObject.AppendLine("customizationValues = { }");
                        lootObject.AppendLine("}");
                        lootObject.AppendLine("addLootItemTemplate(\"" + nname + "\", " + nname + ")");

                        // write the lua for this painting
                        File.WriteAllText(gConfig.outputDirectory + treName + "\\" + gConfig.lua + nname + ".lua", luaPainting.ToString());
                        File.WriteAllText(gConfig.outputDirectory + treName + "\\" + gConfig.luaLoot + nname + ".lua", lootObject.ToString());
                    }

                    // move the texture to the done folder
                    File.Move(flist[j], gConfig.finishedDirectory + treName + "\\" + fi.Name);

                }
            }
            File.WriteAllText(gConfig.outputDirectory + treName + "\\strings.txt", stringlist.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\objects.lua.txt", luaObjects.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\serverobjects.lua.txt", luaServerObjects.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\frogList.lua.txt", frogObjects.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\lootobjects.lua.txt", lootObjects.ToString());

        }
        static void run4b(bool OUTDOOR = true)
        {
            // loot items
            int lootCount = int.Parse(File.ReadAllText(gConfig.lootAppearanceFiles + "lootcount.txt"));

            string[] dlist = Directory.GetDirectories(gConfig.outputDirectory);
            string defName = "loot" + lootCount.ToString();
            Console.WriteLine("Existing Outputs:");
            for (int i = 0; i < dlist.Length; i++)
            {
                DirectoryInfo di = new DirectoryInfo(dlist[i]);
                Console.WriteLine(di.Name);
            }
            string defString = "no";
            Console.WriteLine("Delete existing dirs? (y) [def=" + defString + "]");
            if (Console.ReadLine() == "y")
            {
                for (int i = 0; i < dlist.Length; i++)
                {
                    Directory.Delete(dlist[i], true);
                }
                Console.WriteLine("----------------------------");
            }

            Console.WriteLine("Tre Name? [def=" + defName + "]");
            string instring = Console.ReadLine();

            string treName = instring.Length > 0 ? instring : defName;

            makeTreFolders(treName, true, true);


            StringBuilder stringlist = new StringBuilder();
            StringBuilder luaServerObjects = new StringBuilder();
            StringBuilder luaObjects = new StringBuilder();
            StringBuilder frogObjects = new StringBuilder();
            StringBuilder lootObjects = new StringBuilder();



            string[] flist = File.ReadAllLines(gConfig.lootStaging + "newlootapt.txt");
            int newCount = flist.Length + lootCount;
            for (int i = 0; i < flist.Length; i++)
            {
                //FileInfo fi = new FileInfo(flist[i]);

                string fileReplaceString = flist[i].Replace(".apt", "");
                if (fileReplaceString.Trim().Length > 0)
                {
                    if (fileReplaceString.Length > 50)
                    {
                        Console.WriteLine("Too Long: " + fileReplaceString);
                    }
                    else
                    {
                        string objectname = "loot_" + (lootCount + i).ToString();

                        // we have to make the strings identical in length to the template
                        // this is basically a lazy approach but it works so no need to mess with it
                        // if you don't do this, you will end up with files that might not open in SIE
                        // and will not work with the client, but buggy, not consistent failures
                        string tname = NewName(objectname);
                        stringlist.AppendLine(tname);
                        Console.WriteLine("\t" + tname);

                        string zRepl = "";
                        for (int j = 0; j < fileReplaceString.Length; j++)
                        {
                            zRepl += "z";
                        }

                        // object file                        
                        makeLootObject(fileReplaceString
                            , zRepl
                            , gConfig.outputDirectory + treName + "\\" + gConfig.custom + "shared_" + tname + ".iff", tname);

                        // lua server objects
                        luaServerObjects.AppendLine("includeFile(\"../custom_scripts/object/tangible/custom/" + tname + ".lua\")");
                        lootObjects.AppendLine("includeFile(\"../custom_scripts/loot/items/custom/" + tname + ".lua\")");

                        // frog text
                        frogObjects.AppendLine("\"" + objectname + "\",\"object/tangible/custom/" + tname + ".iff\",");

                        // lua objects file
                        luaObjects.AppendLine("-- " + tname);
                        luaObjects.AppendLine("object_tangible_custom_shared_" + tname + " = SharedTangibleObjectTemplate:new {clientTemplateFileName = \"object/tangible/custom/shared_" + tname + ".iff\"}");
                        luaObjects.AppendLine("ObjectTemplates:addClientTemplate(object_tangible_custom_shared_" + tname + ", \"object/tangible/custom/shared_" + tname + ".iff\")");
                        luaObjects.AppendLine("");

                        StringBuilder luaPainting = new StringBuilder();
                        luaPainting.AppendLine("-- generated by Wicked's loot machine");
                        luaPainting.AppendLine("-- string name is in art_n: " + tname);
                        luaPainting.AppendLine("-- string description is in art_d: " + tname);
                        luaPainting.AppendLine("object_tangible_custom_" + tname + " = object_tangible_custom_shared_" + tname + ":new {");
                        luaPainting.AppendLine("numberExperimentalProperties = { 1, 1, 1},");
                        luaPainting.AppendLine("experimentalProperties = { \"XX\", \"XX\", \"XX\"},");
                        luaPainting.AppendLine("experimentalWeights = { 1, 1, 1},");
                        luaPainting.AppendLine("experimentalGroupTitles = { \"null\", \"null\", \"null\"},");
                        luaPainting.AppendLine("experimentalSubGroupTitles = { \"null\", \"null\", \"hitpoints\"},");
                        luaPainting.AppendLine("experimentalMin = { 0, 0, 1000},");
                        luaPainting.AppendLine("experimentalMax = { 0, 0, 1000},");
                        luaPainting.AppendLine("experimentalPrecision = { 0, 0, 0},");
                        luaPainting.AppendLine("experimentalCombineType = { 0, 0, 4},");
                        if (OUTDOOR)
                            luaPainting.AppendLine("objectMenuComponent = \"CityDecorationMenuComponent\",");
                        else
                            luaPainting.AppendLine("objectMenuComponent = \"\",");
                        luaPainting.AppendLine("}");
                        luaPainting.AppendLine("ObjectTemplates:addTemplate(object_tangible_custom_" + tname + ", \"object/tangible/custom/" + tname + ".iff\")");

                        // loot objects
                        StringBuilder lootObject = new StringBuilder();
                        lootObject.AppendLine("-- generated by Wicked's loot machine");
                        lootObject.AppendLine(tname + " = {");
                        lootObject.AppendLine("minimumLevel = 0,");
                        lootObject.AppendLine("maximumLevel = 0,");
                        lootObject.AppendLine("customObjectName = \"\",");
                        lootObject.AppendLine("directObjectTemplate = \"object/tangible/custom/" + tname + ".iff\",");
                        lootObject.AppendLine("craftingValues = { },");
                        lootObject.AppendLine("customizationStringNames = { },");
                        lootObject.AppendLine("customizationValues = { }");
                        lootObject.AppendLine("}");
                        lootObject.AppendLine("addLootItemTemplate(\"" + tname + "\", " + tname + ")");

                        // write the lua for this loot
                        File.WriteAllText(gConfig.outputDirectory + treName + "\\" + gConfig.lua + tname + ".lua", luaPainting.ToString());
                        File.WriteAllText(gConfig.outputDirectory + treName + "\\" + gConfig.luaLoot + tname + ".lua", lootObject.ToString());
                    }
                }
            }

            File.WriteAllText(gConfig.outputDirectory + treName + "\\strings.txt", stringlist.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\objects.lua.txt", luaObjects.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\serverobjects.lua.txt", luaServerObjects.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\frogList.lua.txt", frogObjects.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\lootobjects.lua.txt", lootObjects.ToString());

            File.WriteAllText(gConfig.lootAppearanceFiles + "lootcount.txt", newCount.ToString());
        }
        static void run4(bool OUTDOOR = true)
        {
            // loot items
            int lootCount = int.Parse(File.ReadAllText(gConfig.lootAppearanceFiles + "lootcount.txt"));

            string[] dlist = Directory.GetDirectories(gConfig.outputDirectory);
            string defName = "loot" + lootCount.ToString();
            Console.WriteLine("Existing Outputs:");
            for (int i = 0; i < dlist.Length; i++)
            {
                DirectoryInfo di = new DirectoryInfo(dlist[i]);
                Console.WriteLine(di.Name);
            }
            string defString = "no";
            Console.WriteLine("Delete existing dirs? (y) [def=" + defString + "]");
            if (Console.ReadLine() == "y")
            {
                for (int i = 0; i < dlist.Length; i++)
                {
                    Directory.Delete(dlist[i], true);
                }
                Console.WriteLine("----------------------------");
            }

            Console.WriteLine("Tre Name? [def=" + defName + "]");
            string instring = Console.ReadLine();

            string treName = instring.Length > 0 ? instring : defName;

            makeTreFolders(treName, true, true);


            StringBuilder stringlist = new StringBuilder();
            StringBuilder luaServerObjects = new StringBuilder();
            StringBuilder luaObjects = new StringBuilder();
            StringBuilder frogObjects = new StringBuilder();
            StringBuilder lootObjects = new StringBuilder();



            string[] flist = Directory.GetFiles(gConfig.lootAppearanceFiles, "*.apt");
            int newCount = flist.Length + lootCount;
            for (int i = 0; i < flist.Length; i++)
            {
                FileInfo fi = new FileInfo(flist[i]);

                string fileReplaceString = fi.Name.Replace(".apt", "");
                if (fileReplaceString.Length > 50)
                {
                    Console.WriteLine("Too Long: " + fileReplaceString);
                }
                else
                {
                    string objectname = "loot_" + (lootCount + i).ToString();

                    // we have to make the strings identical in length to the template
                    // this is basically a lazy approach but it works so no need to mess with it
                    // if you don't do this, you will end up with files that might not open in SIE
                    // and will not work with the client, but buggy, not consistent failures
                    string tname = NewName(objectname);
                    stringlist.AppendLine(tname);
                    Console.WriteLine("\t" + tname);

                    string zRepl = "";
                    for (int j = 0; j < fileReplaceString.Length; j++)
                    {
                        zRepl += "z";
                    }

                    // object file                        
                    makeLootObject(fileReplaceString
                        , zRepl
                        , gConfig.outputDirectory + treName + "\\" + gConfig.custom + "shared_" + tname + ".iff", tname);

                    // lua server objects
                    luaServerObjects.AppendLine("includeFile(\"../custom_scripts/object/tangible/custom/" + tname + ".lua\")");
                    lootObjects.AppendLine("includeFile(\"../custom_scripts/loot/items/custom/" + tname + ".lua\")");

                    // frog text
                    frogObjects.AppendLine("\"" + objectname + "\",\"object/tangible/custom/" + tname + ".iff\",");

                    // lua objects file
                    luaObjects.AppendLine("-- " + tname);
                    luaObjects.AppendLine("object_tangible_custom_shared_" + tname + " = SharedTangibleObjectTemplate:new {clientTemplateFileName = \"object/tangible/custom/shared_" + tname + ".iff\"}");
                    luaObjects.AppendLine("ObjectTemplates:addClientTemplate(object_tangible_custom_shared_" + tname + ", \"object/tangible/custom/shared_" + tname + ".iff\")");
                    luaObjects.AppendLine("");

                    StringBuilder luaPainting = new StringBuilder();
                    luaPainting.AppendLine("-- generated by Wicked's loot machine");
                    luaPainting.AppendLine("-- string name is in art_n: " + tname);
                    luaPainting.AppendLine("-- string description is in art_d: " + tname);
                    luaPainting.AppendLine("object_tangible_custom_" + tname + " = object_tangible_custom_shared_" + tname + ":new {");
                    luaPainting.AppendLine("numberExperimentalProperties = { 1, 1, 1},");
                    luaPainting.AppendLine("experimentalProperties = { \"XX\", \"XX\", \"XX\"},");
                    luaPainting.AppendLine("experimentalWeights = { 1, 1, 1},");
                    luaPainting.AppendLine("experimentalGroupTitles = { \"null\", \"null\", \"null\"},");
                    luaPainting.AppendLine("experimentalSubGroupTitles = { \"null\", \"null\", \"hitpoints\"},");
                    luaPainting.AppendLine("experimentalMin = { 0, 0, 1000},");
                    luaPainting.AppendLine("experimentalMax = { 0, 0, 1000},");
                    luaPainting.AppendLine("experimentalPrecision = { 0, 0, 0},");
                    luaPainting.AppendLine("experimentalCombineType = { 0, 0, 4},");
                    if (OUTDOOR)
                        luaPainting.AppendLine("objectMenuComponent = \"CityDecorationMenuComponent\",");
                    else
                        luaPainting.AppendLine("objectMenuComponent = \"\",");
                    luaPainting.AppendLine("}");
                    luaPainting.AppendLine("ObjectTemplates:addTemplate(object_tangible_custom_" + tname + ", \"object/tangible/custom/" + tname + ".iff\")");

                    // loot objects
                    StringBuilder lootObject = new StringBuilder();
                    lootObject.AppendLine("-- generated by Wicked's loot machine");
                    lootObject.AppendLine(tname + " = {");
                    lootObject.AppendLine("minimumLevel = 0,");
                    lootObject.AppendLine("maximumLevel = 0,");
                    lootObject.AppendLine("customObjectName = \"\",");
                    lootObject.AppendLine("directObjectTemplate = \"object/tangible/custom/" + tname + ".iff\",");
                    lootObject.AppendLine("craftingValues = { },");
                    lootObject.AppendLine("customizationStringNames = { },");
                    lootObject.AppendLine("customizationValues = { }");
                    lootObject.AppendLine("}");
                    lootObject.AppendLine("addLootItemTemplate(\"" + tname + "\", " + tname + ")");

                    // write the lua for this loot
                    File.WriteAllText(gConfig.outputDirectory + treName + "\\" + gConfig.lua + tname + ".lua", luaPainting.ToString());
                    File.WriteAllText(gConfig.outputDirectory + treName + "\\" + gConfig.luaLoot + tname + ".lua", lootObject.ToString());
                }

                // move the texture to the done folder
                File.Move(flist[i], gConfig.finishedDirectory + treName + "\\" + fi.Name);

            }

            File.WriteAllText(gConfig.outputDirectory + treName + "\\strings.txt", stringlist.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\objects.lua.txt", luaObjects.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\serverobjects.lua.txt", luaServerObjects.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\frogList.lua.txt", frogObjects.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\lootobjects.lua.txt", lootObjects.ToString());

            File.WriteAllText(gConfig.lootAppearanceFiles + "lootcount.txt", newCount.ToString());
        }
        static void run1()
        {
            // paintings
            string[] dlist = Directory.GetDirectories(gConfig.outputDirectory);
            string defName = "artwork" + dlist.Length.ToString();
            Console.WriteLine("Existing Outputs:");
            for (int i = 0; i < dlist.Length; i++)
            {
                DirectoryInfo di = new DirectoryInfo(dlist[i]);
                Console.WriteLine(di.Name);
            }
            string defString = "no";
            Console.WriteLine("Delete existing dirs? (y) [def=" + defString + "]");
            if (Console.ReadLine() == "y")
            {
                for (int i = 0; i < dlist.Length; i++)
                {
                    Directory.Delete(dlist[i], true);
                }
                Console.WriteLine("----------------------------");
            }

            Console.WriteLine("Tre Name? [def=" + defName + "]");
            string instring = Console.ReadLine();

            string treName = instring.Length > 0 ? instring : defName;

            makeTreFolders(treName, false);

            List<object[]> frameSelection = new List<object[]>();
            for (int i = 0; i < gConfig.templates.GetLength(0); i++)
            {

                int template = i;
                string[] flist = Directory.GetFiles(gConfig.stagingDirectory + gConfig.templates[template, 1]);
                string lastone = "";
                for (int j = 0; j < flist.Length; j++)
                {
                    if (j == 0)
                        Console.WriteLine(gConfig.templates[i, 0]);
                    FileInfo fi = new FileInfo(flist[j]);
                    string[] tmp = fi.Name.Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries);
                    string tmpName = tmp[1].Split(new char[] { '.' }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (tmpName != lastone)
                    {
                        Console.WriteLine("\t" + tmpName);
                        // now ask which frames
                        List<int> selections = new List<int>();
                        int pnt = 3;
                        for (int k = 0; k < gConfig.frames.GetLength(0); k++)
                        {
                            string framelist = "";
                            for (int l = 0; l < gConfig.frames.GetLength(0); l++)
                            {
                                framelist += " " + gConfig.frames[l, 2];
                            }
                            Console.WriteLine(framelist);
                            string spacer = "";
                            pnt = 3 + (k * 7);
                            for (int l = 0; l < pnt; l++)
                            {
                                spacer += " ";
                            }
                            Console.WriteLine(spacer + "^");
                            Console.WriteLine(gConfig.frames[k, 2] + "? [default = n]");
                            if (Console.ReadLine() == "y")
                                selections.Add(1);
                            else
                                selections.Add(0);
                        }
                        frameSelection.Add(new object[] { tmpName, selections });
                    }
                    lastone = tmpName;
                }
            }


            StringBuilder stringlist = new StringBuilder();
            StringBuilder luaServerObjects = new StringBuilder();
            StringBuilder luaObjects = new StringBuilder();
            StringBuilder frogObjects = new StringBuilder();
            StringBuilder lootObjects = new StringBuilder();


            for (int i = 0; i < gConfig.templates.GetLength(0); i++)
            {
                Console.WriteLine(gConfig.templates[i, 0]);
                int template = i;
                string[] flist = Directory.GetFiles(gConfig.stagingDirectory + gConfig.templates[template, 1]);

                for (int j = 0; j < flist.Length; j++)
                {
                    FileInfo fi = new FileInfo(flist[j]);

                    string[] tmp = fi.Name.Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries);
                    string tmpName = tmp[1].Split(new char[] { '.' }, StringSplitOptions.RemoveEmptyEntries)[0];

                    int frameNumber = -1;

                    for (int k = 0; k < frameSelection.Count; k++)
                    {
                        if (tmpName == frameSelection[k].GetValue(0).ToString())
                        {
                            frameNumber = k;
                            break;
                        }
                    }

                    string rawName = fi.Name.Replace(".dds", "");
                    //art_alderaan1_2000000000
                    if (rawName.Length > 24)
                    {
                        Console.WriteLine("ERROR: File Name Too Long: " + rawName);
                    }
                    else
                    {
                        // we have to make the strings identical in length to the template
                        // this is basically a lazy approach but it works so no need to mess with it
                        // if you don't do this, you will end up with files that might not open in SIE
                        // and will not work with the client, but buggy, not consistent failures
                        string tname = NewName(rawName);
                        stringlist.AppendLine(tname);
                        Console.WriteLine("\t" + tname);

                        // copy texture files
                        File.Copy(flist[j], gConfig.outputDirectory + treName + "\\" + gConfig.texture + tname + fi.Extension);

                        List<int> frames = (List<int>)frameSelection[frameNumber].GetValue(1);

                        // loop all the frames to make one of each
                        for (int k = 0; k < gConfig.frames.GetLength(0); k++)
                        {
                            if (frames[k] == 1)
                            {
                                string nname = NewName(rawName, gConfig.frames[k, 1]);

                                // shader file
                                makeFile(tname, gConfig.outputDirectory + treName + "\\" + gConfig.shader + nname + ".sht", "sht");

                                // object file                        
                                makeFile(nname, gConfig.outputDirectory + treName + "\\" + gConfig.paintings + "shared_" + nname + ".iff", "iff", tname);

                                // appearance file
                                makeFile(nname, gConfig.outputDirectory + treName + "\\" + gConfig.appear + nname + ".apt", "apt");

                                // mesh file
                                makeMesh(nname, gConfig.outputDirectory + treName + "\\" + gConfig.mesh + nname + ".msh", gConfig.templates[template, 1], gConfig.frames[k, 0]);

                                // lua server objects
                                luaServerObjects.AppendLine("includeFile(\"../custom_scripts/object/tangible/painting/" + nname + ".lua\")");
                                lootObjects.AppendLine("includeFile(\"../custom_scripts/loot/items/custom/" + nname + ".lua\")");

                                // frog text
                                frogObjects.AppendLine("\"" + rawName + " " + gConfig.frames[k, 2] + "\",\"object/tangible/painting/" + nname + ".iff\",");

                                // lua objects file
                                luaObjects.AppendLine("-- " + nname);
                                luaObjects.AppendLine("object_tangible_painting_shared_" + nname + " = SharedTangibleObjectTemplate:new {clientTemplateFileName = \"object/tangible/painting/shared_" + nname + ".iff\"}");
                                luaObjects.AppendLine("ObjectTemplates:addClientTemplate(object_tangible_painting_shared_" + nname + ", \"object/tangible/painting/shared_" + nname + ".iff\")");
                                luaObjects.AppendLine("");

                                StringBuilder luaPainting = new StringBuilder();
                                luaPainting.AppendLine("-- generated by Wicked's loot machine");
                                luaPainting.AppendLine("-- string name is in art_n: " + tname);
                                luaPainting.AppendLine("-- string description is in art_d: " + tname);
                                luaPainting.AppendLine("-- frame: " + gConfig.frames[k, 2]);
                                luaPainting.AppendLine("-- layout: " + gConfig.templates[i, 0]);
                                luaPainting.AppendLine("object_tangible_painting_" + nname + " = object_tangible_painting_shared_" + nname + ":new {}");
                                luaPainting.AppendLine("ObjectTemplates:addTemplate(object_tangible_painting_" + nname + ", \"object/tangible/painting/" + nname + ".iff\")");

                                // loot objects
                                StringBuilder lootObject = new StringBuilder();
                                lootObject.AppendLine("-- generated by Wicked's loot machine");
                                lootObject.AppendLine(nname + " = {");
                                lootObject.AppendLine("minimumLevel = 0,");
                                lootObject.AppendLine("maximumLevel = 0,");
                                lootObject.AppendLine("customObjectName = \"\",");
                                lootObject.AppendLine("directObjectTemplate = \"object/tangible/painting/" + nname + ".iff\",");
                                lootObject.AppendLine("craftingValues = { },");
                                lootObject.AppendLine("customizationStringNames = { },");
                                lootObject.AppendLine("customizationValues = { }");
                                lootObject.AppendLine("}");
                                lootObject.AppendLine("addLootItemTemplate(\"" + nname + "\", " + nname + ")");

                                // write the lua for this painting
                                File.WriteAllText(gConfig.outputDirectory + treName + "\\" + gConfig.lua + nname + ".lua", luaPainting.ToString());
                                File.WriteAllText(gConfig.outputDirectory + treName + "\\" + gConfig.luaLoot + nname + ".lua", lootObject.ToString());
                            }
                        }
                        // move the texture to the done folder
                        File.Move(flist[j], gConfig.finishedDirectory + treName + "\\" + fi.Name);
                    }
                }
            }
            File.WriteAllText(gConfig.outputDirectory + treName + "\\strings.txt", stringlist.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\objects.lua.txt", luaObjects.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\serverobjects.lua.txt", luaServerObjects.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\frogList.lua.txt", frogObjects.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\lootobjects.lua.txt", lootObjects.ToString());

        }
        static void run3()
        {
            // this makes prize tokens
            // copy the token template
            string[] dlist = Directory.GetDirectories(gConfig.outputDirectory);
            string defName = "token" + dlist.Length.ToString();
            Console.WriteLine("Existing Outputs:");
            for (int i = 0; i < dlist.Length; i++)
            {
                DirectoryInfo di = new DirectoryInfo(dlist[i]);
                Console.WriteLine(di.Name);
            }
            string defString = "no";
            Console.WriteLine("Delete existing dirs? (y) [def=" + defString + "]");
            if (Console.ReadLine() == "y")
            {
                for (int i = 0; i < dlist.Length; i++)
                {
                    Directory.Delete(dlist[i], true);
                }
                Console.WriteLine("----------------------------");
            }

            Console.WriteLine("Tre Name? [def=" + defName + "]");
            string instring = Console.ReadLine();

            string treName = instring.Length > 0 ? instring : defName;

            makeTreFolders(treName, true, true, true);

            string defToken = "infinity_prize_01";
            Console.WriteLine("Token Name? [def: " + defToken + "]");
            string input = Console.ReadLine();
            if (input.Length > 0)
                defToken = input;

            string tokenTemplate = "tokenGold";

            Console.WriteLine("Which Token Template?");
            Console.WriteLine("1: Gold [default]");
            Console.WriteLine("2: Silver");
            Console.WriteLine("3: Bronze");
            Console.WriteLine("4: Rare");

            input = Console.ReadLine();
            switch (input)
            {
                case ("2"):
                    tokenTemplate = "tokenSilver";
                    break;
                case ("3"):
                    tokenTemplate = "tokenBronze";
                    break;
                case ("4"):
                    tokenTemplate = "tokenRare";
                    break;
                case ("1"):
                default:
                    tokenTemplate = "tokenGold";
                    break;
            }


            int maxTokens = 20;

            StringBuilder stringlist = new StringBuilder();
            StringBuilder luaServerObjects = new StringBuilder();
            StringBuilder luaObjects = new StringBuilder();
            StringBuilder frogObjects = new StringBuilder();
            StringBuilder lootObjects = new StringBuilder();

            for (int i = 0; i < maxTokens; i++)
            {
                string rawName = defToken + "_" + (i + 1).ToString() + "_" + maxTokens.ToString() + "_";

                //infinity prize [1 of 20]

                // we have to make the strings identical in length to the template
                // this is basically a lazy approach but it works so no need to mess with it
                // if you don't do this, you will end up with files that might not open in SIE
                // and will not work with the client, but buggy, not consistent failures
                string tname = NewName(rawName);
                stringlist.AppendLine(tname);
                Console.WriteLine("\t" + tname);



                string nname = NewName(rawName);


                // object file                        
                makeToken(nname, gConfig.outputDirectory + treName + "\\" + gConfig.token + "shared_" + nname + ".iff", tname, tokenTemplate);


                // lua server objects
                luaServerObjects.AppendLine("includeFile(\"../custom_scripts/object/tangible/loot/misc/" + nname + ".lua\")");
                lootObjects.AppendLine("includeFile(\"../custom_scripts/loot/items/loot/misc/" + nname + ".lua\")");

                // frog text
                frogObjects.AppendLine("\"" + rawName + "\",\"object/tangible/loot/misc/" + nname + ".iff\",");

                // lua objects file
                luaObjects.AppendLine("-- " + nname);
                luaObjects.AppendLine("object_tangible_loot_misc_shared_" + nname + " = SharedTangibleObjectTemplate:new {clientTemplateFileName = \"object/tangible/loot/misc/shared_" + nname + ".iff\"}");
                luaObjects.AppendLine("ObjectTemplates:addClientTemplate(object_tangible_loot_misc_shared_" + nname + ", \"object/tangible/loot/misc/shared_" + nname + ".iff\")");
                luaObjects.AppendLine("");

                StringBuilder luaPainting = new StringBuilder();
                luaPainting.AppendLine("-- generated by Wicked's loot machine");
                luaPainting.AppendLine("-- string name is in token_n: " + tname);
                luaPainting.AppendLine("-- string description is in token_d: " + tname);
                luaPainting.AppendLine("object_tangible_loot_misc_" + nname + " = object_tangible_loot_misc_shared_" + nname + ":new {}");
                luaPainting.AppendLine("ObjectTemplates:addTemplate(object_tangible_loot_misc_" + nname + ", \"object/tangible/loot/misc/" + nname + ".iff\")");

                // loot objects
                StringBuilder lootObject = new StringBuilder();
                lootObject.AppendLine("-- generated by Wicked's loot machine");
                lootObject.AppendLine(nname + " = {");
                lootObject.AppendLine("minimumLevel = 0,");
                lootObject.AppendLine("maximumLevel = 0,");
                lootObject.AppendLine("customObjectName = \"\",");
                lootObject.AppendLine("directObjectTemplate = \"object/tangible/loot/misc/" + nname + ".iff\",");
                lootObject.AppendLine("craftingValues = { },");
                lootObject.AppendLine("customizationStringNames = { },");
                lootObject.AppendLine("customizationValues = { }");
                lootObject.AppendLine("}");
                lootObject.AppendLine("addLootItemTemplate(\"" + nname + "\", " + nname + ")");

                // write the lua for this token
                File.WriteAllText(gConfig.outputDirectory + treName + "\\" + gConfig.lua + nname + ".lua", luaPainting.ToString());
                File.WriteAllText(gConfig.outputDirectory + treName + "\\" + gConfig.luaLoot + nname + ".lua", lootObject.ToString());




            }
            File.WriteAllText(gConfig.outputDirectory + treName + "\\strings.txt", stringlist.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\objects.lua.txt", luaObjects.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\serverobjects.lua.txt", luaServerObjects.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\frogList.lua.txt", frogObjects.ToString());
            File.WriteAllText(gConfig.outputDirectory + treName + "\\lootobjects.lua.txt", lootObjects.ToString());





        }
        static string NewName(string PNAME, string FRAME = "")
        {
            string rex = PNAME;

            if (PNAME.Length < gConfig.replaceFileNames.Length)
            {
                int x = PNAME.Length;
                int y = gConfig.replaceFileNames.Length;
                int z = y - x;
                rex += "_";
                int start = 1;
                if (FRAME.Length > 0)
                {
                    rex += FRAME + "_";
                    start += 4;
                }
                for (int i = start; i < z; i++)
                {
                    rex += "0";
                }
            }
            return rex;
        }
        static void makeTreFolders(string TRENAME, bool CUSTOM, bool OBJECTONLY = false, bool TOKEN = false)
        {
            // make the tre folder
            Directory.CreateDirectory(gConfig.outputDirectory + TRENAME);
            // make the texture folder
            if (!OBJECTONLY)
                Directory.CreateDirectory(gConfig.outputDirectory + TRENAME + "\\" + gConfig.texture);
            // make the shader
            if (!OBJECTONLY)
                Directory.CreateDirectory(gConfig.outputDirectory + TRENAME + "\\" + gConfig.shader);
            if (TOKEN)
            {
                Directory.CreateDirectory(gConfig.outputDirectory + TRENAME + "\\" + gConfig.token);
            }
            else
            {
                // make the object folder
                if (CUSTOM)
                {
                    Directory.CreateDirectory(gConfig.outputDirectory + TRENAME + "\\" + gConfig.custom);
                }
                else
                {
                    Directory.CreateDirectory(gConfig.outputDirectory + TRENAME + "\\" + gConfig.paintings);
                }
            }
            // make the appearance and mesh folder
            if (!OBJECTONLY)
                Directory.CreateDirectory(gConfig.outputDirectory + TRENAME + "\\" + gConfig.mesh);
            // make lua output folder
            Directory.CreateDirectory(gConfig.outputDirectory + TRENAME + "\\" + gConfig.lua);
            Directory.CreateDirectory(gConfig.outputDirectory + TRENAME + "\\" + gConfig.luaLoot);
            // make the done archive
            Directory.CreateDirectory(gConfig.finishedDirectory + TRENAME + "\\");
        }
        static void makeFile(string PNAME, string OUTFILE, string EXT, string STRREPLACE = "")
        {
            ReplaceTextInFile("templates/" + gConfig.replaceFileNames + "." + EXT,
           gConfig.replaceFileNames, PNAME, OUTFILE);

            if (STRREPLACE.Length > 0)
            {
                //Thread.Sleep(500);
                ReplaceTextInFile(OUTFILE, gConfig.replaceStrings, STRREPLACE, OUTFILE);
                ReplaceTextInFile(OUTFILE, gConfig.replaceStrings, STRREPLACE, OUTFILE);
            }
        }
        static void makeToken(string PNAME, string OUTFILE, string STRREPLACE, string TEMPLATE)
        {
            File.Copy("templates/" + TEMPLATE + ".iff", OUTFILE);

            if (STRREPLACE.Length > 0)
            {
                //Thread.Sleep(500);
                ReplaceTextInFile(OUTFILE, gConfig.replaceStrings, STRREPLACE, OUTFILE);
                ReplaceTextInFile(OUTFILE, gConfig.replaceStrings, STRREPLACE, OUTFILE);
            }
        }
        static void makeLootObject(string PNAME, string REPL, string OUTFILE, string STRREPLACE)
        {
            ReplaceTextInFile(gConfig.lootTemplates + "loot" + PNAME.Length.ToString() + ".iff",
                REPL, PNAME, OUTFILE);
            if (STRREPLACE.Length > 0)
            {
                //Thread.Sleep(500);
                ReplaceTextInFile(OUTFILE, gConfig.replaceStrings, STRREPLACE, OUTFILE);
                ReplaceTextInFile(OUTFILE, gConfig.replaceStrings, STRREPLACE, OUTFILE);
            }
        }
        static void makeMesh(string PNAME, string OUTFILE, string TEMPLATE, string FRAME = "")
        {
            ReplaceTextInFile("templates/" + TEMPLATE + ".msh",
             gConfig.replaceFileNames, PNAME, OUTFILE);
            //Thread.Sleep(500);
            if (FRAME.Length > 0)
                ReplaceTextInFile(OUTFILE, gConfig.replaceFrames, FRAME, OUTFILE);
        }

        static void ReplaceTextInFile(string fileName, string oldText, string newText, string newfilename)
        {

            byte[] fileBytes = File.ReadAllBytes(fileName),
                oldBytes = Encoding.UTF8.GetBytes(oldText),
                newBytes = Encoding.UTF8.GetBytes(newText);

            int index = IndexOfBytes(fileBytes, oldBytes);
            if (index < 0)
            {
                // Text was not found
                return;
            }

            byte[] newFileBytes =
                new byte[fileBytes.Length + newBytes.Length - oldBytes.Length];

            Buffer.BlockCopy(fileBytes, 0, newFileBytes, 0, index);
            Buffer.BlockCopy(newBytes, 0, newFileBytes, index, newBytes.Length);
            Buffer.BlockCopy(fileBytes, index + oldBytes.Length,
                newFileBytes, index + newBytes.Length,
                fileBytes.Length - index - oldBytes.Length);
            File.WriteAllBytes(newfilename, newFileBytes);
        }
        static int IndexOfBytes(byte[] searchBuffer, byte[] bytesToFind)
        {
            for (int i = 0; i < searchBuffer.Length - bytesToFind.Length; i++)
            {
                bool success = true;

                for (int j = 0; j < bytesToFind.Length; j++)
                {
                    if (searchBuffer[i + j] != bytesToFind[j])
                    {
                        success = false;
                        break;
                    }
                }

                if (success)
                {
                    return i;
                }
            }

            return -1;
        }

        /*##########################################*/
        private static void setupScreens()
        {
            c64.AppendLine("       **** COMMODORE 64 BASIC V2 ****");
            c64.AppendLine("");
            c64.AppendLine("     64K RAM SYSTEM     38911   BYTES FREE");
            c64.AppendLine("");
            c64.AppendLine("READY");
            c64.AppendLine("");
        }
    }
}

